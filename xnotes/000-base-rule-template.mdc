---
description: "ALWAYS use as a starting point when CREATING a new Cursor rule to ENSURE proper rule formatting and detection"
globs: ".cursor/rules/*.mdc"
alwaysApply: false
---

# üìÑ Template de R√®gle Cursor

## üìã Vue d'Ensemble
Ce template d√©finit la structure standard pour toutes les r√®gles Cursor (.mdc) du projet. Il assure une d√©tection optimale par l'IA et une application coh√©rente des r√®gles.

> ‚ö†Ô∏è **Attention**: Les r√®gles Cursor doivent suivre strictement ce format pour √™tre correctement d√©tect√©es et appliqu√©es par l'IA.

## üéØ Objectifs
- Standardiser le format des r√®gles Cursor
- Optimiser la d√©tection automatique par l'IA
- Assurer une application coh√©rente des r√®gles
- Faciliter la maintenance et les mises √† jour

## üîÑ Structure d'une R√®gle Cursor

```mermaid
graph TD
    A[Frontmatter] --> B[Titre Principal]
    B --> C[Vue d'Ensemble]
    C --> D[Requirements]
    D --> E[Sections Sp√©cifiques]
    E --> F[Exemples]
    F --> G[Version]

    style A fill:#f9f,stroke:#333,stroke-width:2px
    style D fill:#dfd,stroke:#333,stroke-width:2px
    style F fill:#ffd,stroke:#333,stroke-width:2px
```

## üìù Sections Standards

### üìå Frontmatter
Le frontmatter d'une r√®gle Cursor doit contenir:
```yaml
---
description: "ACTION when TRIGGER to OUTCOME"
globs: "pattern/matching/*.ext"
---
```

> üí° **Note**: La description doit suivre strictement le format "ACTION when TRIGGER to OUTCOME" pour une d√©tection optimale par l'IA.

### üè∑Ô∏è Titre Principal
Titre clair et descriptif:
```markdown
# Nom de la R√®gle
```

### üìã Contexte (optionnel)
Br√®ve explication du contexte d'application de la r√®gle.

### ‚úÖ Requirements
Liste des exigences sp√©cifiques que la r√®gle impose:
```markdown
## Requirements

- Exigence 1
- Exigence 2
- Exigence 3
```

### üìù Sections Sp√©cifiques
Contenu d√©taill√© de la r√®gle, organis√© logiquement.

### üí° Exemples
Exemples concrets d'application de la r√®gle:

```markdown
<example>
Bon exemple:
```
[Code ou contenu conforme]
```
[Explication]
</example>

<example type="invalid">
Exemple √† √©viter:
```
[Code ou contenu non conforme]
```
[Explication]
</example>
```

### üìä Version
La version doit √™tre indiqu√©e √† la fin du document:
```markdown
<version>X.Y.Z</version>
```

## üìä Conventions Sp√©cifiques aux R√®gles

### Format de Nommage des Fichiers
- **Format**: `PREFIX-name.mdc`
- **Pr√©fixes standards**:
  - `0XX`: Core standards
  - `1XX`: Tool configs
  - `3XX`: Testing standards
  - `1XXX`: Language rules
  - `2XXX`: Framework rules
  - `8XX`: Workflows
  - `9XX`: Templates
  - `_name`: Private rules (gitignored)

### Tags XML Autoris√©s
- `<example>` et `<example type="invalid">`: Pour les exemples
- `<version>`: Pour la version de la r√®gle
- `<critical>`: Pour les exigences critiques
- `<danger>`: Pour les avertissements importants
- `<required>`: Pour les √©l√©ments obligatoires
- `<rules>` et `<rule>`: Pour les ensembles de r√®gles

## üí° Exemples

<example>
**Bon exemple de r√®gle Cursor**:

```md
---
description: "ALWAYS use when WRITING TypeScript files to ENSURE consistent code formatting"
globs: "**/*.ts"
---
# TypeScript Code Standards

## Requirements

- Follow consistent indentation (2 spaces)
- Use camelCase for variables and functions
- Use PascalCase for classes and interfaces
- Add type annotations for all parameters and return types

## Examples

<example>
// Good TypeScript code
function calculateTotal(prices: number[]): number {
  return prices.reduce((sum, price) => sum + price, 0);
}
</example>

<example type="invalid">
// Bad TypeScript code
function calc_total(p) {
  return p.reduce((s, p) => s + p, 0);
}
</example>

<version>1.0.0</version>
```

Cette r√®gle suit correctement le format: description au format ACTION-TRIGGER-OUTCOME, globs pr√©cis, requirements clairs, exemples de code bon et mauvais, et version indiqu√©e.
</example>

<example type="invalid">
**Exemple de r√®gle Cursor √† √©viter**:

```md
# TypeScript Coding Rules

These are the rules for TypeScript code.

- Use consistent indentation
- Use proper naming conventions
- Add types

Examples:
Good: function doSomething() { }
Bad: function do_something() { }
```

Cette r√®gle manque de frontmatter, ne suit pas la structure standard, n'utilise pas les balises XML pour les exemples, et ne sp√©cifie pas de version.
</example>

## ‚úÖ Bonnes Pratiques
- Gardez les descriptions de r√®gles concises et pr√©cises
- Assurez-vous que le pattern glob cible correctement les fichiers concern√©s
- Incluez toujours des exemples positifs et n√©gatifs
- Utilisez des formulations claires et directes
- Mettez √† jour la version √† chaque modification

## üîó R√©f√©rences
- [R√®gles Cursor Principales](mdc:.cursor/rules/000-cursor-rules.mdc)
- [Documentation Markdown](mdc:.cursor/rules/400-md-docs.mdc)

<version>1.0.0</version> 